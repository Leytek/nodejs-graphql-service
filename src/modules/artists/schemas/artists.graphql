type Artist {
    _id: ID!
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [Band]
    instruments: [String]
}

type DeletedArtist {
    acknowledged: Boolean
    deletedCount: Int
}

input ArtistCreate {
    firstName: String!
    secondName: String!
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

input ArtistUpdate {
    id: ID!
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

input ArtistSearch {
    _id: ID
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    limit: Int
    offset: Int
}

type Query {
    artist(id: ID!): Artist
    artists(input: ArtistSearch): [Artist]
}

type Mutation {
    createArtist(input: ArtistCreate): Artist
    deleteArtist(id: ID!): DeletedArtist
    updateArtist(input: ArtistUpdate): Artist
}
